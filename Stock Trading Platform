import java.util.HashMap;
import java.util.Scanner;
class Stock {
    private String symbol;
    private double price;
    public Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }
    public String getSymbol() {
        return symbol;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }
}
class Portfolio {
    private HashMap<String, Integer> stocks;

    public Portfolio() {
        stocks = new HashMap<>();
    }
    public void buyStock(String symbol, int quantity) {
        stocks.put(symbol, stocks.getOrDefault(symbol, 0) + quantity);
        System.out.println("Bought " + quantity + " shares of " + symbol);
    }
    public void sellStock(String symbol, int quantity) {
        if (stocks.containsKey(symbol) && stocks.get(symbol) >= quantity) {
            stocks.put(symbol, stocks.get(symbol) - quantity);
            System.out.println("Sold " + quantity + " shares of " + symbol);
        } else {
            System.out.println("Insufficient shares of " + symbol + " to sell.");
        }
    }
    public void displayPortfolio(HashMap<String, Stock> marketData) {
        System.out.println("\n=== Your Portfolio ===");
        double totalValue = 0;
        for (String symbol : stocks.keySet()) {
            Stock stock = marketData.get(symbol);
            if (stock != null) {
                int quantity = stocks.get(symbol);
                double stockValue = stock.getPrice() * quantity;
                totalValue += stockValue;
                System.out.println(symbol + ": " + quantity + " shares @ $" + stock.getPrice() + " each, Value: $" + stockValue);
            }
        }
        System.out.println("Total Portfolio Value: $" + totalValue);
    }
}
public class StockTradingPlatform {
    private static HashMap<String, Stock> marketData = new HashMap<>();
    private static Portfolio userPortfolio = new Portfolio();
    public static void main(String[] args) {
        initializeMarketData();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;
        while (running) {
            displayMenu();
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    viewMarketData();
                    break;
                case 2:
                    buyStock(scanner);
                    break;
                case 3:
                    sellStock(scanner);
                    break;
                case 4:
                    userPortfolio.displayPortfolio(marketData);
                    break;
                case 5:
                    running = false;
                    System.out.println("Exiting the platform.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }
    private static void initializeMarketData() {
        marketData.put("AAPL", new Stock("AAPL", 145.30));
        marketData.put("GOOGL", new Stock("GOOGL", 2800.50));
        marketData.put("AMZN", new Stock("AMZN", 3450.10));
        marketData.put("MSFT", new Stock("MSFT", 299.50));
    }
    private static void displayMenu() {
        System.out.println("\n=== Stock Trading Platform ===");
        System.out.println("1. View Market Data");
        System.out.println("2. Buy Stock");
        System.out.println("3. Sell Stock");
        System.out.println("4. View Portfolio");
        System.out.println("5. Exit");
        System.out.print("Choose an option: ");
    }
    private static void viewMarketData() {
        System.out.println("\n=== Market Data ===");
        for (Stock stock : marketData.values()) {
            System.out.println(stock.getSymbol() + ": $" + stock.getPrice());
        }
    }
    private static void buyStock(Scanner scanner) {
        System.out.print("Enter stock symbol to buy (e.g., AAPL, GOOGL): ");
        String symbol = scanner.next().toUpperCase();

        if (marketData.containsKey(symbol)) {
            System.out.print("Enter quantity to buy: ");
            int quantity = scanner.nextInt();
            userPortfolio.buyStock(symbol, quantity);
        } else {
            System.out.println("Invalid stock symbol.");
        }
    }
    private static void sellStock(Scanner scanner) {
        System.out.print("Enter stock symbol to sell (e.g., AAPL, GOOGL): ");
        String symbol = scanner.next().toUpperCase();

        if (marketData.containsKey(symbol)) {
            System.out.print("Enter quantity to sell: ");
            int quantity = scanner.nextInt();
            userPortfolio.sellStock(symbol, quantity);
        } else {
            System.out.println("Invalid stock symbol.");
        }
    }
}
